model = AbstractModel()


model.T = Set()  # Index Set for time steps of optimization horizon
model.T_SoC = Set()  # SoC of the ESSs at the end of optimization horizon are also taken into account

##################################       PARAMETERS            #################################
################################################################################################
model.dT = Param(within=PositiveIntegers)  # Number of seconds in one time step

# model.Price_Forecast=Param(model.T)                             #Electric price forecast
model.P_PV = Param(model.T, within=NonNegativeReals)  # PV PMPP forecast
model.PV_Inv_Max_Power = Param(within=PositiveReals)  # PV inverter capacity

#ess
model.ESS_Min_SoC = Param(within=PositiveReals)  # Minimum SoC of ESSs
model.ESS_Max_SoC = Param(within=PositiveReals)  # Maximum SoC of ESSs
model.SoC_Value = Param(within=PositiveReals)
model.ESS_Capacity = Param(within=PositiveReals)  # Storage Capacity of ESSs
model.ESS_Max_Charge_Power = Param(within=PositiveReals)  # Max Charge Power of ESSs
model.ESS_Max_Discharge_Power = Param(within=PositiveReals)  # Max Discharge Power of ESSs
model.ESS_Charging_Eff = Param(within=PositiveReals)  # Charging efficiency of ESSs
model.ESS_Discharging_Eff = Param(within=PositiveReals)  # Discharging efficiency of ESSs

#grid
model.P_Grid_Max_Export_Power = Param(within=NonNegativeReals)  # Max active power export
model.Q_Grid_Max_Export_Power = Param(within=NonNegativeReals)  # Max reactive power export



#load
model.P_Load = Param(model.T, within=Reals)	#active power of load
model.Q_Load = Param(model.T, within=Reals)

#voltage control
model.voltage = Param(model.T, within=PositiveReals) 	#measured voltage at node

model.mu_P=Param(within=Reals)	#voltage sensitivity factorof active power

model.mu_Q=Param(within=Reals)	#voltage sensitivity factor of reactive power
model.voltage_ref=Param(within=PositiveReals) 
################################################################################################

##################################       VARIABLES             #################################
################################################################################################


#grid
model.P_Grid_R_Output = Var(model.T, within=Reals)  # Active power exchange with grid at R phase
model.P_Grid_S_Output = Var(model.T, within=Reals)  # Active power exchange with grid at S phase
model.P_Grid_T_Output = Var(model.T, within=Reals)  # Active power exchange with grid at S phase
model.P_Grid_Output = Var(model.T, within=Reals)
model.Q_Grid_R_Output = Var(model.T, within=Reals)  # Reactive power exchange with grid at R phase
model.Q_Grid_S_Output = Var(model.T, within=Reals)  # Reactive power exchange with grid at S phase
model.Q_Grid_T_Output = Var(model.T, within=Reals)  # Reactive power exchange with grid at T phase
model.Q_Grid_Output = Var(model.T, within=Reals)

#pv
model.P_PV_Output = Var(model.T, within=NonNegativeReals, bounds=(0, model.PV_Inv_Max_Power))  # initialize=iniVal)

model.Q_PV_Output = Var(model.T, within=Reals) 

#ess
model.P_ESS_Output = Var(model.T, within=Reals, bounds=(
    -model.ESS_Max_Charge_Power, model.ESS_Max_Discharge_Power))  # ,initialize=iniSoC)
model.SoC_ESS = Var(model.T_SoC, within=NonNegativeReals, bounds=(model.ESS_Min_SoC, model.ESS_Max_SoC))

#voltage
model.voltage_node = Var(model.T, within=NonNegativeReals)
################################################################################################

###########################################################################
#######                         CONSTRAINTS                         #######

# PV constraints
def con_rule_pv_potential(model, t):
    return model.P_PV_Output[t] <= model.P_PV[t]
	
def con_rule_pv_S(model, t):
	return model.P_PV_Output[t]*model.P_PV_Output[t]+model.Q_PV_Output[t]*model.Q_PV_Output[t]<=model.PV_Inv_Max_Power*model.PV_Inv_Max_Power
	
#voltage
def con_rule_voltage(model, t):
	return model.voltage_node[t]== (model.voltage[t]*model.voltage_ref+model.mu_P*model.P_PV_Output[t]+model.mu_Q*model.Q_PV_Output[t])/model.voltage_ref

# Import/Export constraints
def con_rule_grid_P(model, t):
    return model.P_Grid_Output[t] == model.P_Grid_R_Output[t] + model.P_Grid_S_Output[t] + model.P_Grid_T_Output[t]

def con_rule_grid_P_inv(model, t):
    return model.P_Grid_Output[t] >= -model.P_Grid_Max_Export_Power

def con_rule_grid_Q(model, t):
    return model.Q_Grid_Output[t] == model.Q_Grid_R_Output[t] + model.Q_Grid_S_Output[t] + model.Q_Grid_T_Output[t]

def con_rule_grid_Q_inv(model, t):
    return model.Q_Grid_Output[t] >= -model.Q_Grid_Max_Export_Power
	
	
	# ESS SoC balance
def con_rule_socBalance(model, t):
    return model.SoC_ESS[t + 1] == model.SoC_ESS[t] - model.P_ESS_Output[t] * model.dT / model.ESS_Capacity / 3600

def con_rule_iniSoC(model):
    return model.SoC_ESS[0] == model.SoC_Value																#soc[0] auf einen wert, der groeser als upper bound ist?
# Generation-feed in balance
def con_rule_generation_feedin(model, t):
    return model.P_Grid_Output[t] * model.P_Grid_Output[t] + model.Q_Grid_Output[t] * model.Q_Grid_Output[t] == (
            model.P_PV_Output[t] + model.P_ESS_Output[t]) * (model.P_PV_Output[t] + model.P_ESS_Output[t])
			
#power balance
def con_rule_system_P(model, t):
	return model.P_ESS_Output[t]+model.P_Grid_Output[t]+model.P_Load[t]+model.P_PV_Output[t]==0
	
def con_rule_system_Q(model, t):
	return model.Q_Grid_Output[t]+model.Q_Load[t]+model.Q_PV_Output[t]==0

model.con_pv_pmax = Constraint(model.T, rule=con_rule_pv_potential)
model.con_pv_s_max = Constraint(model.T, rule=con_rule_pv_S)
model.con_voltage = Constraint(model.T, rule=con_rule_voltage)
model.con_grid_P = Constraint(model.T, rule=con_rule_grid_P)
model.con_grid_inv_P = Constraint(model.T, rule=con_rule_grid_P_inv)
model.con_grid_Q = Constraint(model.T, rule=con_rule_grid_Q)
model.con_grid_inv_Q = Constraint(model.T, rule=con_rule_grid_Q_inv)
#model.con_gen_feedin = Constraint(model.T, rule=con_rule_generation_feedin)
model.con_system_P = Constraint(model.T, rule=con_rule_system_P)

model.con_system_Q = Constraint(model.T, rule=con_rule_system_Q)

model.con_ess_soc = Constraint(model.T, rule=con_rule_socBalance)
model.con_ess_Inisoc = Constraint(rule=con_rule_iniSoC)


###########################################################################
#######                         OBJECTIVE                           #######
###########################################################################
def obj_rule(model):
    return sum((model.voltage_node[t]-1)*(model.voltage_node[t]-1) for t in model.T)
#*1000 +(1-0.01)*(model.P_PV[t]-model.P_PV_Output[t])+0.01*model.Q_PV_Output[t]
model.obj = Objective(rule=obj_rule, sense=minimize)