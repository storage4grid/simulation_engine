# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Simulation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sim_duration_in_hours: int=None, threshold_low: float=None, threshold_medium: float=None, threshold_high: float=None):  # noqa: E501
        """Simulation - a model defined in Swagger

        :param sim_duration_in_hours: The sim_duration_in_hours of this Simulation.  # noqa: E501
        :type sim_duration_in_hours: int
        :param threshold_low: The threshold_low of this Simulation.  # noqa: E501
        :type threshold_low: float
        :param threshold_medium: The threshold_medium of this Simulation.  # noqa: E501
        :type threshold_medium: float
        :param threshold_high: The threshold_high of this Simulation.  # noqa: E501
        :type threshold_high: float
        """
        self.swagger_types = {
            'sim_duration_in_hours': int,
            'threshold_low': float,
            'threshold_medium': float,
            'threshold_high': float
        }

        self.attribute_map = {
            'sim_duration_in_hours': 'sim_duration_in_hours',
            'threshold_low': 'thresholdLow',
            'threshold_medium': 'thresholdMedium',
            'threshold_high': 'thresholdHigh'
        }

        self._sim_duration_in_hours = sim_duration_in_hours
        self._threshold_low = threshold_low
        self._threshold_medium = threshold_medium
        self._threshold_high = threshold_high

    @classmethod
    def from_dict(cls, dikt) -> 'Simulation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Simulation of this Simulation.  # noqa: E501
        :rtype: Simulation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sim_duration_in_hours(self) -> int:
        """Gets the sim_duration_in_hours of this Simulation.


        :return: The sim_duration_in_hours of this Simulation.
        :rtype: int
        """
        return self._sim_duration_in_hours

    @sim_duration_in_hours.setter
    def sim_duration_in_hours(self, sim_duration_in_hours: int):
        """Sets the sim_duration_in_hours of this Simulation.


        :param sim_duration_in_hours: The sim_duration_in_hours of this Simulation.
        :type sim_duration_in_hours: int
        """
        if sim_duration_in_hours is None:
            raise ValueError("Invalid value for `sim_duration_in_hours`, must not be `None`")  # noqa: E501

        self._sim_duration_in_hours = sim_duration_in_hours

    @property
    def threshold_low(self) -> float:
        """Gets the threshold_low of this Simulation.

        Lower threshold in % for voltage error  # noqa: E501

        :return: The threshold_low of this Simulation.
        :rtype: float
        """
        return self._threshold_low

    @threshold_low.setter
    def threshold_low(self, threshold_low: float):
        """Sets the threshold_low of this Simulation.

        Lower threshold in % for voltage error  # noqa: E501

        :param threshold_low: The threshold_low of this Simulation.
        :type threshold_low: float
        """
        if threshold_low is not None and threshold_low > 100:  # noqa: E501
            raise ValueError("Invalid value for `threshold_low`, must be a value less than or equal to `100`")  # noqa: E501
        if threshold_low is not None and threshold_low < 0:  # noqa: E501
            raise ValueError("Invalid value for `threshold_low`, must be a value greater than or equal to `0`")  # noqa: E501

        self._threshold_low = threshold_low

    @property
    def threshold_medium(self) -> float:
        """Gets the threshold_medium of this Simulation.

        Medium threshold in % for voltage error  # noqa: E501

        :return: The threshold_medium of this Simulation.
        :rtype: float
        """
        return self._threshold_medium

    @threshold_medium.setter
    def threshold_medium(self, threshold_medium: float):
        """Sets the threshold_medium of this Simulation.

        Medium threshold in % for voltage error  # noqa: E501

        :param threshold_medium: The threshold_medium of this Simulation.
        :type threshold_medium: float
        """
        if threshold_medium is not None and threshold_medium > 100:  # noqa: E501
            raise ValueError("Invalid value for `threshold_medium`, must be a value less than or equal to `100`")  # noqa: E501
        if threshold_medium is not None and threshold_medium < 0:  # noqa: E501
            raise ValueError("Invalid value for `threshold_medium`, must be a value greater than or equal to `0`")  # noqa: E501

        self._threshold_medium = threshold_medium

    @property
    def threshold_high(self) -> float:
        """Gets the threshold_high of this Simulation.

        Maximum threshold in % for voltage error  # noqa: E501

        :return: The threshold_high of this Simulation.
        :rtype: float
        """
        return self._threshold_high

    @threshold_high.setter
    def threshold_high(self, threshold_high: float):
        """Sets the threshold_high of this Simulation.

        Maximum threshold in % for voltage error  # noqa: E501

        :param threshold_high: The threshold_high of this Simulation.
        :type threshold_high: float
        """
        if threshold_high is not None and threshold_high > 100:  # noqa: E501
            raise ValueError("Invalid value for `threshold_high`, must be a value less than or equal to `100`")  # noqa: E501
        if threshold_high is not None and threshold_high < 0:  # noqa: E501
            raise ValueError("Invalid value for `threshold_high`, must be a value greater than or equal to `0`")  # noqa: E501

        self._threshold_high = threshold_high
