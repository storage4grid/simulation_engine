# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Winding(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, wdg: int=None, bus: str=None, connection_type: str=None, k_v: float=None, k_va: float=None, percent_resistance: float=None, xlt: int=None, xht: int=None):  # noqa: E501
        """Winding - a model defined in Swagger

        :param wdg: The wdg of this Winding.  # noqa: E501
        :type wdg: int
        :param bus: The bus of this Winding.  # noqa: E501
        :type bus: str
        :param connection_type: The connection_type of this Winding.  # noqa: E501
        :type connection_type: str
        :param k_v: The k_v of this Winding.  # noqa: E501
        :type k_v: float
        :param k_va: The k_va of this Winding.  # noqa: E501
        :type k_va: float
        :param percent_resistance: The percent_resistance of this Winding.  # noqa: E501
        :type percent_resistance: float
        :param xlt: The xlt of this Winding.  # noqa: E501
        :type xlt: int
        :param xht: The xht of this Winding.  # noqa: E501
        :type xht: int
        """
        self.swagger_types = {
            'wdg': int,
            'bus': str,
            'connection_type': str,
            'k_v': float,
            'k_va': float,
            'percent_resistance': float,
            'xlt': int,
            'xht': int
        }

        self.attribute_map = {
            'wdg': 'wdg',
            'bus': 'bus',
            'connection_type': 'connection_type',
            'k_v': 'kV',
            'k_va': 'kVA',
            'percent_resistance': 'percent_resistance',
            'xlt': 'xlt',
            'xht': 'xht'
        }

        self._wdg = wdg
        self._bus = bus
        self._connection_type = connection_type
        self._k_v = k_v
        self._k_va = k_va
        self._percent_resistance = percent_resistance
        self._xlt = xlt
        self._xht = xht

    @classmethod
    def from_dict(cls, dikt) -> 'Winding':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Winding of this Winding.  # noqa: E501
        :rtype: Winding
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wdg(self) -> int:
        """Gets the wdg of this Winding.

        Integer representing the winding witch will become the active winding for subsequent data  # noqa: E501

        :return: The wdg of this Winding.
        :rtype: int
        """
        return self._wdg

    @wdg.setter
    def wdg(self, wdg: int):
        """Sets the wdg of this Winding.

        Integer representing the winding witch will become the active winding for subsequent data  # noqa: E501

        :param wdg: The wdg of this Winding.
        :type wdg: int
        """

        self._wdg = wdg

    @property
    def bus(self) -> str:
        """Gets the bus of this Winding.

        Definition for the connector of this winding (each winding is connected to one terminal of the transformator and, hence, to one bus  # noqa: E501

        :return: The bus of this Winding.
        :rtype: str
        """
        return self._bus

    @bus.setter
    def bus(self, bus: str):
        """Sets the bus of this Winding.

        Definition for the connector of this winding (each winding is connected to one terminal of the transformator and, hence, to one bus  # noqa: E501

        :param bus: The bus of this Winding.
        :type bus: str
        """

        self._bus = bus

    @property
    def connection_type(self) -> str:
        """Gets the connection_type of this Winding.


        :return: The connection_type of this Winding.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type: str):
        """Sets the connection_type of this Winding.


        :param connection_type: The connection_type of this Winding.
        :type connection_type: str
        """

        self._connection_type = connection_type

    @property
    def k_v(self) -> float:
        """Gets the k_v of this Winding.

        Rated voltage of this winding, kV  # noqa: E501

        :return: The k_v of this Winding.
        :rtype: float
        """
        return self._k_v

    @k_v.setter
    def k_v(self, k_v: float):
        """Sets the k_v of this Winding.

        Rated voltage of this winding, kV  # noqa: E501

        :param k_v: The k_v of this Winding.
        :type k_v: float
        """

        self._k_v = k_v

    @property
    def k_va(self) -> float:
        """Gets the k_va of this Winding.

        base kVA rating for windings  # noqa: E501

        :return: The k_va of this Winding.
        :rtype: float
        """
        return self._k_va

    @k_va.setter
    def k_va(self, k_va: float):
        """Sets the k_va of this Winding.

        base kVA rating for windings  # noqa: E501

        :param k_va: The k_va of this Winding.
        :type k_va: float
        """

        self._k_va = k_va

    @property
    def percent_resistance(self) -> float:
        """Gets the percent_resistance of this Winding.


        :return: The percent_resistance of this Winding.
        :rtype: float
        """
        return self._percent_resistance

    @percent_resistance.setter
    def percent_resistance(self, percent_resistance: float):
        """Sets the percent_resistance of this Winding.


        :param percent_resistance: The percent_resistance of this Winding.
        :type percent_resistance: float
        """

        self._percent_resistance = percent_resistance

    @property
    def xlt(self) -> int:
        """Gets the xlt of this Winding.


        :return: The xlt of this Winding.
        :rtype: int
        """
        return self._xlt

    @xlt.setter
    def xlt(self, xlt: int):
        """Sets the xlt of this Winding.


        :param xlt: The xlt of this Winding.
        :type xlt: int
        """

        self._xlt = xlt

    @property
    def xht(self) -> int:
        """Gets the xht of this Winding.


        :return: The xht of this Winding.
        :rtype: int
        """
        return self._xht

    @xht.setter
    def xht(self, xht: int):
        """Sets the xht of this Winding.


        :param xht: The xht of this Winding.
        :type xht: int
        """

        self._xht = xht
