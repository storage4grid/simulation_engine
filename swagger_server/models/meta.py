# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Meta(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, percentage_max_power: float=None, sensitivity_factor: float=None, min_vpu_low: float=None, max_vpu_low: float=None, min_vpu_high: float=None, max_vpu_high: float=None):  # noqa: E501
        """Meta - a model defined in Swagger

        :param percentage_max_power: The percentage_max_power of this Meta.  # noqa: E501
        :type percentage_max_power: float
        :param sensitivity_factor: The sensitivity_factor of this Meta.  # noqa: E501
        :type sensitivity_factor: float
        :param min_vpu_low: The min_vpu_low of this Meta.  # noqa: E501
        :type min_vpu_low: float
        :param max_vpu_low: The max_vpu_low of this Meta.  # noqa: E501
        :type max_vpu_low: float
        :param min_vpu_high: The min_vpu_high of this Meta.  # noqa: E501
        :type min_vpu_high: float
        :param max_vpu_high: The max_vpu_high of this Meta.  # noqa: E501
        :type max_vpu_high: float
        """
        self.swagger_types = {
            'percentage_max_power': float,
            'sensitivity_factor': float,
            'min_vpu_low': float,
            'max_vpu_low': float,
            'min_vpu_high': float,
            'max_vpu_high': float
        }

        self.attribute_map = {
            'percentage_max_power': 'percentage_max_power',
            'sensitivity_factor': 'sensitivity_factor',
            'min_vpu_low': 'min_vpu_low',
            'max_vpu_low': 'max_vpu_low',
            'min_vpu_high': 'min_vpu_high',
            'max_vpu_high': 'max_vpu_high'
        }

        self._percentage_max_power = percentage_max_power
        self._sensitivity_factor = sensitivity_factor
        self._min_vpu_low = min_vpu_low
        self._max_vpu_low = max_vpu_low
        self._min_vpu_high = min_vpu_high
        self._max_vpu_high = max_vpu_high

    @classmethod
    def from_dict(cls, dikt) -> 'Meta':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meta of this Meta.  # noqa: E501
        :rtype: Meta
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage_max_power(self) -> float:
        """Gets the percentage_max_power of this Meta.


        :return: The percentage_max_power of this Meta.
        :rtype: float
        """
        return self._percentage_max_power

    @percentage_max_power.setter
    def percentage_max_power(self, percentage_max_power: float):
        """Sets the percentage_max_power of this Meta.


        :param percentage_max_power: The percentage_max_power of this Meta.
        :type percentage_max_power: float
        """

        self._percentage_max_power = percentage_max_power

    @property
    def sensitivity_factor(self) -> float:
        """Gets the sensitivity_factor of this Meta.


        :return: The sensitivity_factor of this Meta.
        :rtype: float
        """
        return self._sensitivity_factor

    @sensitivity_factor.setter
    def sensitivity_factor(self, sensitivity_factor: float):
        """Sets the sensitivity_factor of this Meta.


        :param sensitivity_factor: The sensitivity_factor of this Meta.
        :type sensitivity_factor: float
        """

        self._sensitivity_factor = sensitivity_factor

    @property
    def min_vpu_low(self) -> float:
        """Gets the min_vpu_low of this Meta.


        :return: The min_vpu_low of this Meta.
        :rtype: float
        """
        return self._min_vpu_low

    @min_vpu_low.setter
    def min_vpu_low(self, min_vpu_low: float):
        """Sets the min_vpu_low of this Meta.


        :param min_vpu_low: The min_vpu_low of this Meta.
        :type min_vpu_low: float
        """

        self._min_vpu_low = min_vpu_low

    @property
    def max_vpu_low(self) -> float:
        """Gets the max_vpu_low of this Meta.


        :return: The max_vpu_low of this Meta.
        :rtype: float
        """
        return self._max_vpu_low

    @max_vpu_low.setter
    def max_vpu_low(self, max_vpu_low: float):
        """Sets the max_vpu_low of this Meta.


        :param max_vpu_low: The max_vpu_low of this Meta.
        :type max_vpu_low: float
        """

        self._max_vpu_low = max_vpu_low

    @property
    def min_vpu_high(self) -> float:
        """Gets the min_vpu_high of this Meta.


        :return: The min_vpu_high of this Meta.
        :rtype: float
        """
        return self._min_vpu_high

    @min_vpu_high.setter
    def min_vpu_high(self, min_vpu_high: float):
        """Sets the min_vpu_high of this Meta.


        :param min_vpu_high: The min_vpu_high of this Meta.
        :type min_vpu_high: float
        """

        self._min_vpu_high = min_vpu_high

    @property
    def max_vpu_high(self) -> float:
        """Gets the max_vpu_high of this Meta.


        :return: The max_vpu_high of this Meta.
        :rtype: float
        """
        return self._max_vpu_high

    @max_vpu_high.setter
    def max_vpu_high(self, max_vpu_high: float):
        """Sets the max_vpu_high of this Meta.


        :param max_vpu_high: The max_vpu_high of this Meta.
        :type max_vpu_high: float
        """

        self._max_vpu_high = max_vpu_high
