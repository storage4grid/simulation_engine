# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Transformer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, phases: int=None, windings: int=None, buses: List[str]=None, kvas: List[float]=None, kvs: List[float]=None, conns: List[str]=None, xsc_array: List[float]=None, percent_rs: List[float]=None, percent_load_loss: float=None, bank: str=None, taps: List[float]=None):  # noqa: E501
        """Transformer - a model defined in Swagger

        :param id: The id of this Transformer.  # noqa: E501
        :type id: str
        :param phases: The phases of this Transformer.  # noqa: E501
        :type phases: int
        :param windings: The windings of this Transformer.  # noqa: E501
        :type windings: int
        :param buses: The buses of this Transformer.  # noqa: E501
        :type buses: List[str]
        :param kvas: The kvas of this Transformer.  # noqa: E501
        :type kvas: List[float]
        :param kvs: The kvs of this Transformer.  # noqa: E501
        :type kvs: List[float]
        :param conns: The conns of this Transformer.  # noqa: E501
        :type conns: List[str]
        :param xsc_array: The xsc_array of this Transformer.  # noqa: E501
        :type xsc_array: List[float]
        :param percent_rs: The percent_rs of this Transformer.  # noqa: E501
        :type percent_rs: List[float]
        :param percent_load_loss: The percent_load_loss of this Transformer.  # noqa: E501
        :type percent_load_loss: float
        :param bank: The bank of this Transformer.  # noqa: E501
        :type bank: str
        :param taps: The taps of this Transformer.  # noqa: E501
        :type taps: List[float]
        """
        self.swagger_types = {
            'id': str,
            'phases': int,
            'windings': int,
            'buses': List[str],
            'kvas': List[float],
            'kvs': List[float],
            'conns': List[str],
            'xsc_array': List[float],
            'percent_rs': List[float],
            'percent_load_loss': float,
            'bank': str,
            'taps': List[float]
        }

        self.attribute_map = {
            'id': 'id',
            'phases': 'phases',
            'windings': 'windings',
            'buses': 'buses',
            'kvas': 'kvas',
            'kvs': 'kvs',
            'conns': 'conns',
            'xsc_array': 'xsc_array',
            'percent_rs': 'percent_rs',
            'percent_load_loss': 'percent_load_loss',
            'bank': 'bank',
            'taps': 'taps'
        }

        self._id = id
        self._phases = phases
        self._windings = windings
        self._buses = buses
        self._kvas = kvas
        self._kvs = kvs
        self._conns = conns
        self._xsc_array = xsc_array
        self._percent_rs = percent_rs
        self._percent_load_loss = percent_load_loss
        self._bank = bank
        self._taps = taps

    @classmethod
    def from_dict(cls, dikt) -> 'Transformer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transformer of this Transformer.  # noqa: E501
        :rtype: Transformer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Transformer.


        :return: The id of this Transformer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Transformer.


        :param id: The id of this Transformer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def phases(self) -> int:
        """Gets the phases of this Transformer.

        Number of Phases  # noqa: E501

        :return: The phases of this Transformer.
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases: int):
        """Sets the phases of this Transformer.

        Number of Phases  # noqa: E501

        :param phases: The phases of this Transformer.
        :type phases: int
        """
        if phases is None:
            raise ValueError("Invalid value for `phases`, must not be `None`")  # noqa: E501

        self._phases = phases

    @property
    def windings(self) -> int:
        """Gets the windings of this Transformer.

        number of windings  # noqa: E501

        :return: The windings of this Transformer.
        :rtype: int
        """
        return self._windings

    @windings.setter
    def windings(self, windings: int):
        """Sets the windings of this Transformer.

        number of windings  # noqa: E501

        :param windings: The windings of this Transformer.
        :type windings: int
        """
        if windings is None:
            raise ValueError("Invalid value for `windings`, must not be `None`")  # noqa: E501

        self._windings = windings

    @property
    def buses(self) -> List[str]:
        """Gets the buses of this Transformer.

        Array of bus definitions for windings [1, 2. …].  # noqa: E501

        :return: The buses of this Transformer.
        :rtype: List[str]
        """
        return self._buses

    @buses.setter
    def buses(self, buses: List[str]):
        """Sets the buses of this Transformer.

        Array of bus definitions for windings [1, 2. …].  # noqa: E501

        :param buses: The buses of this Transformer.
        :type buses: List[str]
        """
        if buses is None:
            raise ValueError("Invalid value for `buses`, must not be `None`")  # noqa: E501

        self._buses = buses

    @property
    def kvas(self) -> List[float]:
        """Gets the kvas of this Transformer.

        Array of base kVA ratings for windings [1,2,…].  # noqa: E501

        :return: The kvas of this Transformer.
        :rtype: List[float]
        """
        return self._kvas

    @kvas.setter
    def kvas(self, kvas: List[float]):
        """Sets the kvas of this Transformer.

        Array of base kVA ratings for windings [1,2,…].  # noqa: E501

        :param kvas: The kvas of this Transformer.
        :type kvas: List[float]
        """
        if kvas is None:
            raise ValueError("Invalid value for `kvas`, must not be `None`")  # noqa: E501

        self._kvas = kvas

    @property
    def kvs(self) -> List[float]:
        """Gets the kvs of this Transformer.

        Array of kV ratings for the kV field for windings [1,2,…].  # noqa: E501

        :return: The kvs of this Transformer.
        :rtype: List[float]
        """
        return self._kvs

    @kvs.setter
    def kvs(self, kvs: List[float]):
        """Sets the kvs of this Transformer.

        Array of kV ratings for the kV field for windings [1,2,…].  # noqa: E501

        :param kvs: The kvs of this Transformer.
        :type kvs: List[float]
        """
        if kvs is None:
            raise ValueError("Invalid value for `kvs`, must not be `None`")  # noqa: E501

        self._kvs = kvs

    @property
    def conns(self) -> List[str]:
        """Gets the conns of this Transformer.

        Array of winding connections for windings [1, 2. …] <wye|delta>.  # noqa: E501

        :return: The conns of this Transformer.
        :rtype: List[str]
        """
        return self._conns

    @conns.setter
    def conns(self, conns: List[str]):
        """Sets the conns of this Transformer.

        Array of winding connections for windings [1, 2. …] <wye|delta>.  # noqa: E501

        :param conns: The conns of this Transformer.
        :type conns: List[str]
        """

        self._conns = conns

    @property
    def xsc_array(self) -> List[float]:
        """Gets the xsc_array of this Transformer.

        Array of n*(n-1) /2 short circuit reactances in percent on the first winding’s kVA base. “n” is the number of windings. Order (12, 13, 14, …1n, 23, 24, … 34, …)  # noqa: E501

        :return: The xsc_array of this Transformer.
        :rtype: List[float]
        """
        return self._xsc_array

    @xsc_array.setter
    def xsc_array(self, xsc_array: List[float]):
        """Sets the xsc_array of this Transformer.

        Array of n*(n-1) /2 short circuit reactances in percent on the first winding’s kVA base. “n” is the number of windings. Order (12, 13, 14, …1n, 23, 24, … 34, …)  # noqa: E501

        :param xsc_array: The xsc_array of this Transformer.
        :type xsc_array: List[float]
        """

        self._xsc_array = xsc_array

    @property
    def percent_rs(self) -> List[float]:
        """Gets the percent_rs of this Transformer.

        Array of percent resistances for windings [1, 2. …]  # noqa: E501

        :return: The percent_rs of this Transformer.
        :rtype: List[float]
        """
        return self._percent_rs

    @percent_rs.setter
    def percent_rs(self, percent_rs: List[float]):
        """Sets the percent_rs of this Transformer.

        Array of percent resistances for windings [1, 2. …]  # noqa: E501

        :param percent_rs: The percent_rs of this Transformer.
        :type percent_rs: List[float]
        """

        self._percent_rs = percent_rs

    @property
    def percent_load_loss(self) -> float:
        """Gets the percent_load_loss of this Transformer.

        Percent Losses at rated load.. Causes the %r values to be set for windings 1 and 2.  # noqa: E501

        :return: The percent_load_loss of this Transformer.
        :rtype: float
        """
        return self._percent_load_loss

    @percent_load_loss.setter
    def percent_load_loss(self, percent_load_loss: float):
        """Sets the percent_load_loss of this Transformer.

        Percent Losses at rated load.. Causes the %r values to be set for windings 1 and 2.  # noqa: E501

        :param percent_load_loss: The percent_load_loss of this Transformer.
        :type percent_load_loss: float
        """

        self._percent_load_loss = percent_load_loss

    @property
    def bank(self) -> str:
        """Gets the bank of this Transformer.

        Name of the bank this transformer is part of  # noqa: E501

        :return: The bank of this Transformer.
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank: str):
        """Sets the bank of this Transformer.

        Name of the bank this transformer is part of  # noqa: E501

        :param bank: The bank of this Transformer.
        :type bank: str
        """

        self._bank = bank

    @property
    def taps(self) -> List[float]:
        """Gets the taps of this Transformer.

        Array of per unit taps for windings [1,2,…].  # noqa: E501

        :return: The taps of this Transformer.
        :rtype: List[float]
        """
        return self._taps

    @taps.setter
    def taps(self, taps: List[float]):
        """Sets the taps of this Transformer.

        Array of per unit taps for windings [1,2,…].  # noqa: E501

        :param taps: The taps of this Transformer.
        :type taps: List[float]
        """

        self._taps = taps
