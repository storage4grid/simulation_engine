# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class XYCurve(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, npts: float=None, xarray: List[float]=None, yarray: List[float]=None):  # noqa: E501
        """XYCurve - a model defined in Swagger

        :param id: The id of this XYCurve.  # noqa: E501
        :type id: str
        :param npts: The npts of this XYCurve.  # noqa: E501
        :type npts: float
        :param xarray: The xarray of this XYCurve.  # noqa: E501
        :type xarray: List[float]
        :param yarray: The yarray of this XYCurve.  # noqa: E501
        :type yarray: List[float]
        """
        self.swagger_types = {
            'id': str,
            'npts': float,
            'xarray': List[float],
            'yarray': List[float]
        }

        self.attribute_map = {
            'id': 'id',
            'npts': 'npts',
            'xarray': 'xarray',
            'yarray': 'yarray'
        }

        self._id = id
        self._npts = npts
        self._xarray = xarray
        self._yarray = yarray

    @classmethod
    def from_dict(cls, dikt) -> 'XYCurve':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The XYCurve of this XYCurve.  # noqa: E501
        :rtype: XYCurve
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this XYCurve.


        :return: The id of this XYCurve.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this XYCurve.


        :param id: The id of this XYCurve.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def npts(self) -> float:
        """Gets the npts of this XYCurve.


        :return: The npts of this XYCurve.
        :rtype: float
        """
        return self._npts

    @npts.setter
    def npts(self, npts: float):
        """Sets the npts of this XYCurve.


        :param npts: The npts of this XYCurve.
        :type npts: float
        """
        if npts is None:
            raise ValueError("Invalid value for `npts`, must not be `None`")  # noqa: E501

        self._npts = npts

    @property
    def xarray(self) -> List[float]:
        """Gets the xarray of this XYCurve.


        :return: The xarray of this XYCurve.
        :rtype: List[float]
        """
        return self._xarray

    @xarray.setter
    def xarray(self, xarray: List[float]):
        """Sets the xarray of this XYCurve.


        :param xarray: The xarray of this XYCurve.
        :type xarray: List[float]
        """
        if xarray is None:
            raise ValueError("Invalid value for `xarray`, must not be `None`")  # noqa: E501

        self._xarray = xarray

    @property
    def yarray(self) -> List[float]:
        """Gets the yarray of this XYCurve.


        :return: The yarray of this XYCurve.
        :rtype: List[float]
        """
        return self._yarray

    @yarray.setter
    def yarray(self, yarray: List[float]):
        """Sets the yarray of this XYCurve.


        :param yarray: The yarray of this XYCurve.
        :type yarray: List[float]
        """
        if yarray is None:
            raise ValueError("Invalid value for `yarray`, must not be `None`")  # noqa: E501

        self._yarray = yarray
