# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegControl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, transformer: str=None, winding: int=None, vreg: float=None, band: float=None, ptration: float=None, ctprim: float=None, r: float=None, x: float=None):  # noqa: E501
        """RegControl - a model defined in Swagger

        :param id: The id of this RegControl.  # noqa: E501
        :type id: str
        :param transformer: The transformer of this RegControl.  # noqa: E501
        :type transformer: str
        :param winding: The winding of this RegControl.  # noqa: E501
        :type winding: int
        :param vreg: The vreg of this RegControl.  # noqa: E501
        :type vreg: float
        :param band: The band of this RegControl.  # noqa: E501
        :type band: float
        :param ptration: The ptration of this RegControl.  # noqa: E501
        :type ptration: float
        :param ctprim: The ctprim of this RegControl.  # noqa: E501
        :type ctprim: float
        :param r: The r of this RegControl.  # noqa: E501
        :type r: float
        :param x: The x of this RegControl.  # noqa: E501
        :type x: float
        """
        self.swagger_types = {
            'id': str,
            'transformer': str,
            'winding': int,
            'vreg': float,
            'band': float,
            'ptration': float,
            'ctprim': float,
            'r': float,
            'x': float
        }

        self.attribute_map = {
            'id': 'id',
            'transformer': 'transformer',
            'winding': 'winding',
            'vreg': 'vreg',
            'band': 'band',
            'ptration': 'ptration',
            'ctprim': 'ctprim',
            'r': 'r',
            'x': 'x'
        }

        self._id = id
        self._transformer = transformer
        self._winding = winding
        self._vreg = vreg
        self._band = band
        self._ptration = ptration
        self._ctprim = ctprim
        self._r = r
        self._x = x

    @classmethod
    def from_dict(cls, dikt) -> 'RegControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegControl of this RegControl.  # noqa: E501
        :rtype: RegControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this RegControl.


        :return: The id of this RegControl.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RegControl.


        :param id: The id of this RegControl.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def transformer(self) -> str:
        """Gets the transformer of this RegControl.

        ID of the transformer to be connected to  # noqa: E501

        :return: The transformer of this RegControl.
        :rtype: str
        """
        return self._transformer

    @transformer.setter
    def transformer(self, transformer: str):
        """Sets the transformer of this RegControl.

        ID of the transformer to be connected to  # noqa: E501

        :param transformer: The transformer of this RegControl.
        :type transformer: str
        """

        self._transformer = transformer

    @property
    def winding(self) -> int:
        """Gets the winding of this RegControl.


        :return: The winding of this RegControl.
        :rtype: int
        """
        return self._winding

    @winding.setter
    def winding(self, winding: int):
        """Sets the winding of this RegControl.


        :param winding: The winding of this RegControl.
        :type winding: int
        """

        self._winding = winding

    @property
    def vreg(self) -> float:
        """Gets the vreg of this RegControl.


        :return: The vreg of this RegControl.
        :rtype: float
        """
        return self._vreg

    @vreg.setter
    def vreg(self, vreg: float):
        """Sets the vreg of this RegControl.


        :param vreg: The vreg of this RegControl.
        :type vreg: float
        """

        self._vreg = vreg

    @property
    def band(self) -> float:
        """Gets the band of this RegControl.


        :return: The band of this RegControl.
        :rtype: float
        """
        return self._band

    @band.setter
    def band(self, band: float):
        """Sets the band of this RegControl.


        :param band: The band of this RegControl.
        :type band: float
        """

        self._band = band

    @property
    def ptration(self) -> float:
        """Gets the ptration of this RegControl.


        :return: The ptration of this RegControl.
        :rtype: float
        """
        return self._ptration

    @ptration.setter
    def ptration(self, ptration: float):
        """Sets the ptration of this RegControl.


        :param ptration: The ptration of this RegControl.
        :type ptration: float
        """

        self._ptration = ptration

    @property
    def ctprim(self) -> float:
        """Gets the ctprim of this RegControl.


        :return: The ctprim of this RegControl.
        :rtype: float
        """
        return self._ctprim

    @ctprim.setter
    def ctprim(self, ctprim: float):
        """Sets the ctprim of this RegControl.


        :param ctprim: The ctprim of this RegControl.
        :type ctprim: float
        """

        self._ctprim = ctprim

    @property
    def r(self) -> float:
        """Gets the r of this RegControl.


        :return: The r of this RegControl.
        :rtype: float
        """
        return self._r

    @r.setter
    def r(self, r: float):
        """Sets the r of this RegControl.


        :param r: The r of this RegControl.
        :type r: float
        """

        self._r = r

    @property
    def x(self) -> float:
        """Gets the x of this RegControl.


        :return: The x of this RegControl.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x: float):
        """Sets the x of this RegControl.


        :param x: The x of this RegControl.
        :type x: float
        """

        self._x = x
