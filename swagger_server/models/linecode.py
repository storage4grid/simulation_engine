# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Linecode(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, nphases: float=None, rmatrix: List[List[float]]=None, xmatrix: List[List[float]]=None, cmatrix: List[List[float]]=None, units: str=None):  # noqa: E501
        """Linecode - a model defined in Swagger

        :param id: The id of this Linecode.  # noqa: E501
        :type id: str
        :param nphases: The nphases of this Linecode.  # noqa: E501
        :type nphases: float
        :param rmatrix: The rmatrix of this Linecode.  # noqa: E501
        :type rmatrix: List[List[float]]
        :param xmatrix: The xmatrix of this Linecode.  # noqa: E501
        :type xmatrix: List[List[float]]
        :param cmatrix: The cmatrix of this Linecode.  # noqa: E501
        :type cmatrix: List[List[float]]
        :param units: The units of this Linecode.  # noqa: E501
        :type units: str
        """
        self.swagger_types = {
            'id': str,
            'nphases': float,
            'rmatrix': List[List[float]],
            'xmatrix': List[List[float]],
            'cmatrix': List[List[float]],
            'units': str
        }

        self.attribute_map = {
            'id': 'id',
            'nphases': 'nphases',
            'rmatrix': 'rmatrix',
            'xmatrix': 'xmatrix',
            'cmatrix': 'cmatrix',
            'units': 'units'
        }

        self._id = id
        self._nphases = nphases
        self._rmatrix = rmatrix
        self._xmatrix = xmatrix
        self._cmatrix = cmatrix
        self._units = units

    @classmethod
    def from_dict(cls, dikt) -> 'Linecode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Linecode of this Linecode.  # noqa: E501
        :rtype: Linecode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Linecode.


        :return: The id of this Linecode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Linecode.


        :param id: The id of this Linecode.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def nphases(self) -> float:
        """Gets the nphases of this Linecode.


        :return: The nphases of this Linecode.
        :rtype: float
        """
        return self._nphases

    @nphases.setter
    def nphases(self, nphases: float):
        """Sets the nphases of this Linecode.


        :param nphases: The nphases of this Linecode.
        :type nphases: float
        """
        if nphases is None:
            raise ValueError("Invalid value for `nphases`, must not be `None`")  # noqa: E501

        self._nphases = nphases

    @property
    def rmatrix(self) -> List[List[float]]:
        """Gets the rmatrix of this Linecode.


        :return: The rmatrix of this Linecode.
        :rtype: List[List[float]]
        """
        return self._rmatrix

    @rmatrix.setter
    def rmatrix(self, rmatrix: List[List[float]]):
        """Sets the rmatrix of this Linecode.


        :param rmatrix: The rmatrix of this Linecode.
        :type rmatrix: List[List[float]]
        """
        if rmatrix is None:
            raise ValueError("Invalid value for `rmatrix`, must not be `None`")  # noqa: E501

        self._rmatrix = rmatrix

    @property
    def xmatrix(self) -> List[List[float]]:
        """Gets the xmatrix of this Linecode.


        :return: The xmatrix of this Linecode.
        :rtype: List[List[float]]
        """
        return self._xmatrix

    @xmatrix.setter
    def xmatrix(self, xmatrix: List[List[float]]):
        """Sets the xmatrix of this Linecode.


        :param xmatrix: The xmatrix of this Linecode.
        :type xmatrix: List[List[float]]
        """
        if xmatrix is None:
            raise ValueError("Invalid value for `xmatrix`, must not be `None`")  # noqa: E501

        self._xmatrix = xmatrix

    @property
    def cmatrix(self) -> List[List[float]]:
        """Gets the cmatrix of this Linecode.


        :return: The cmatrix of this Linecode.
        :rtype: List[List[float]]
        """
        return self._cmatrix

    @cmatrix.setter
    def cmatrix(self, cmatrix: List[List[float]]):
        """Sets the cmatrix of this Linecode.


        :param cmatrix: The cmatrix of this Linecode.
        :type cmatrix: List[List[float]]
        """

        self._cmatrix = cmatrix

    @property
    def units(self) -> str:
        """Gets the units of this Linecode.


        :return: The units of this Linecode.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this Linecode.


        :param units: The units of this Linecode.
        :type units: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units
