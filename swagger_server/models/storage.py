# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Storage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, bus1: str=None, phases: int=None, connection: str=None, soc: float=None, min_soc: float=None, max_soc: float=None, kv: float=None, kw_rated: float=None, storage_capacity: float=None, kwh_stored: float=None, max_charging_power: float=None, max_discharging_power: float=None, charge_efficiency: float=None, discharge_efficiency: float=None, powerfactor: float=None, optimization_model: str=None, global_control: bool=False, voltage_sensitivity_factor_active_power: float=None, voltage_sensitivity_factor_reactive_power: float=None):  # noqa: E501
        """Storage - a model defined in Swagger

        :param id: The id of this Storage.  # noqa: E501
        :type id: str
        :param bus1: The bus1 of this Storage.  # noqa: E501
        :type bus1: str
        :param phases: The phases of this Storage.  # noqa: E501
        :type phases: int
        :param connection: The connection of this Storage.  # noqa: E501
        :type connection: str
        :param soc: The soc of this Storage.  # noqa: E501
        :type soc: float
        :param min_soc: The min_soc of this Storage.  # noqa: E501
        :type min_soc: float
        :param max_soc: The max_soc of this Storage.  # noqa: E501
        :type max_soc: float
        :param kv: The kv of this Storage.  # noqa: E501
        :type kv: float
        :param kw_rated: The kw_rated of this Storage.  # noqa: E501
        :type kw_rated: float
        :param storage_capacity: The storage_capacity of this Storage.  # noqa: E501
        :type storage_capacity: float
        :param kwh_stored: The kwh_stored of this Storage.  # noqa: E501
        :type kwh_stored: float
        :param max_charging_power: The max_charging_power of this Storage.  # noqa: E501
        :type max_charging_power: float
        :param max_discharging_power: The max_discharging_power of this Storage.  # noqa: E501
        :type max_discharging_power: float
        :param charge_efficiency: The charge_efficiency of this Storage.  # noqa: E501
        :type charge_efficiency: float
        :param discharge_efficiency: The discharge_efficiency of this Storage.  # noqa: E501
        :type discharge_efficiency: float
        :param powerfactor: The powerfactor of this Storage.  # noqa: E501
        :type powerfactor: float
        :param optimization_model: The optimization_model of this Storage.  # noqa: E501
        :type optimization_model: str
        :param global_control: The global_control of this Storage.  # noqa: E501
        :type global_control: bool
        :param voltage_sensitivity_factor_active_power: The voltage_sensitivity_factor_active_power of this Storage.  # noqa: E501
        :type voltage_sensitivity_factor_active_power: float
        :param voltage_sensitivity_factor_reactive_power: The voltage_sensitivity_factor_reactive_power of this Storage.  # noqa: E501
        :type voltage_sensitivity_factor_reactive_power: float
        """
        self.swagger_types = {
            'id': str,
            'bus1': str,
            'phases': int,
            'connection': str,
            'soc': float,
            'min_soc': float,
            'max_soc': float,
            'kv': float,
            'kw_rated': float,
            'storage_capacity': float,
            'kwh_stored': float,
            'max_charging_power': float,
            'max_discharging_power': float,
            'charge_efficiency': float,
            'discharge_efficiency': float,
            'powerfactor': float,
            'optimization_model': str,
            'global_control': bool,
            'voltage_sensitivity_factor_active_power': float,
            'voltage_sensitivity_factor_reactive_power': float
        }

        self.attribute_map = {
            'id': 'id',
            'bus1': 'bus1',
            'phases': 'phases',
            'connection': 'connection',
            'soc': 'soc',
            'min_soc': 'min_soc',
            'max_soc': 'max_soc',
            'kv': 'kv',
            'kw_rated': 'kw_rated',
            'storage_capacity': 'storage_capacity',
            'kwh_stored': 'kwh_stored',
            'max_charging_power': 'max_charging_power',
            'max_discharging_power': 'max_discharging_power',
            'charge_efficiency': 'charge_efficiency',
            'discharge_efficiency': 'discharge_efficiency',
            'powerfactor': 'powerfactor',
            'optimization_model': 'optimization_model',
            'global_control': 'global_control',
            'voltage_sensitivity_factor_active_power': 'voltage_sensitivity_factor_active_power',
            'voltage_sensitivity_factor_reactive_power': 'voltage_sensitivity_factor_reactive_power'
        }

        self._id = id
        self._bus1 = bus1
        self._phases = phases
        self._connection = connection
        self._soc = soc
        self._min_soc = min_soc
        self._max_soc = max_soc
        self._kv = kv
        self._kw_rated = kw_rated
        self._storage_capacity = storage_capacity
        self._kwh_stored = kwh_stored
        self._max_charging_power = max_charging_power
        self._max_discharging_power = max_discharging_power
        self._charge_efficiency = charge_efficiency
        self._discharge_efficiency = discharge_efficiency
        self._powerfactor = powerfactor
        self._optimization_model = optimization_model
        self._global_control = global_control
        self._voltage_sensitivity_factor_active_power = voltage_sensitivity_factor_active_power
        self._voltage_sensitivity_factor_reactive_power = voltage_sensitivity_factor_reactive_power

    @classmethod
    def from_dict(cls, dikt) -> 'Storage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Storage of this Storage.  # noqa: E501
        :rtype: Storage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Storage.


        :return: The id of this Storage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Storage.


        :param id: The id of this Storage.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def bus1(self) -> str:
        """Gets the bus1 of this Storage.

        ID for the connected bus  # noqa: E501

        :return: The bus1 of this Storage.
        :rtype: str
        """
        return self._bus1

    @bus1.setter
    def bus1(self, bus1: str):
        """Sets the bus1 of this Storage.

        ID for the connected bus  # noqa: E501

        :param bus1: The bus1 of this Storage.
        :type bus1: str
        """
        if bus1 is None:
            raise ValueError("Invalid value for `bus1`, must not be `None`")  # noqa: E501

        self._bus1 = bus1

    @property
    def phases(self) -> int:
        """Gets the phases of this Storage.


        :return: The phases of this Storage.
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases: int):
        """Sets the phases of this Storage.


        :param phases: The phases of this Storage.
        :type phases: int
        """

        self._phases = phases

    @property
    def connection(self) -> str:
        """Gets the connection of this Storage.

        ={wye|LN|delta|LL}. Default is wye. (openDSS Name: conn)  # noqa: E501

        :return: The connection of this Storage.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection: str):
        """Sets the connection of this Storage.

        ={wye|LN|delta|LL}. Default is wye. (openDSS Name: conn)  # noqa: E501

        :param connection: The connection of this Storage.
        :type connection: str
        """

        self._connection = connection

    @property
    def soc(self) -> float:
        """Gets the soc of this Storage.

        State of Charge in % of rated kWh (openDSS Name: %stored)  # noqa: E501

        :return: The soc of this Storage.
        :rtype: float
        """
        return self._soc

    @soc.setter
    def soc(self, soc: float):
        """Sets the soc of this Storage.

        State of Charge in % of rated kWh (openDSS Name: %stored)  # noqa: E501

        :param soc: The soc of this Storage.
        :type soc: float
        """

        self._soc = soc

    @property
    def min_soc(self) -> float:
        """Gets the min_soc of this Storage.


        :return: The min_soc of this Storage.
        :rtype: float
        """
        return self._min_soc

    @min_soc.setter
    def min_soc(self, min_soc: float):
        """Sets the min_soc of this Storage.


        :param min_soc: The min_soc of this Storage.
        :type min_soc: float
        """

        self._min_soc = min_soc

    @property
    def max_soc(self) -> float:
        """Gets the max_soc of this Storage.


        :return: The max_soc of this Storage.
        :rtype: float
        """
        return self._max_soc

    @max_soc.setter
    def max_soc(self, max_soc: float):
        """Sets the max_soc of this Storage.


        :param max_soc: The max_soc of this Storage.
        :type max_soc: float
        """

        self._max_soc = max_soc

    @property
    def kv(self) -> float:
        """Gets the kv of this Storage.

        Nominal rated (1.0 per unit) voltage, kV, for Storage element.  # noqa: E501

        :return: The kv of this Storage.
        :rtype: float
        """
        return self._kv

    @kv.setter
    def kv(self, kv: float):
        """Sets the kv of this Storage.

        Nominal rated (1.0 per unit) voltage, kV, for Storage element.  # noqa: E501

        :param kv: The kv of this Storage.
        :type kv: float
        """
        if kv is None:
            raise ValueError("Invalid value for `kv`, must not be `None`")  # noqa: E501

        self._kv = kv

    @property
    def kw_rated(self) -> float:
        """Gets the kw_rated of this Storage.

        kW rating of power output. Side effect: Set KVA property.  # noqa: E501

        :return: The kw_rated of this Storage.
        :rtype: float
        """
        return self._kw_rated

    @kw_rated.setter
    def kw_rated(self, kw_rated: float):
        """Sets the kw_rated of this Storage.

        kW rating of power output. Side effect: Set KVA property.  # noqa: E501

        :param kw_rated: The kw_rated of this Storage.
        :type kw_rated: float
        """

        self._kw_rated = kw_rated

    @property
    def storage_capacity(self) -> float:
        """Gets the storage_capacity of this Storage.

        Rated storage capacity in kWh. Default is 50.  # noqa: E501

        :return: The storage_capacity of this Storage.
        :rtype: float
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity: float):
        """Sets the storage_capacity of this Storage.

        Rated storage capacity in kWh. Default is 50.  # noqa: E501

        :param storage_capacity: The storage_capacity of this Storage.
        :type storage_capacity: float
        """
        if storage_capacity is None:
            raise ValueError("Invalid value for `storage_capacity`, must not be `None`")  # noqa: E501

        self._storage_capacity = storage_capacity

    @property
    def kwh_stored(self) -> float:
        """Gets the kwh_stored of this Storage.

        Present amount of energy stored, kWh. Default is same as kWh rated.  # noqa: E501

        :return: The kwh_stored of this Storage.
        :rtype: float
        """
        return self._kwh_stored

    @kwh_stored.setter
    def kwh_stored(self, kwh_stored: float):
        """Sets the kwh_stored of this Storage.

        Present amount of energy stored, kWh. Default is same as kWh rated.  # noqa: E501

        :param kwh_stored: The kwh_stored of this Storage.
        :type kwh_stored: float
        """

        self._kwh_stored = kwh_stored

    @property
    def max_charging_power(self) -> float:
        """Gets the max_charging_power of this Storage.

        Maximal power to charge the storage  # noqa: E501

        :return: The max_charging_power of this Storage.
        :rtype: float
        """
        return self._max_charging_power

    @max_charging_power.setter
    def max_charging_power(self, max_charging_power: float):
        """Sets the max_charging_power of this Storage.

        Maximal power to charge the storage  # noqa: E501

        :param max_charging_power: The max_charging_power of this Storage.
        :type max_charging_power: float
        """

        self._max_charging_power = max_charging_power

    @property
    def max_discharging_power(self) -> float:
        """Gets the max_discharging_power of this Storage.

        Maximal power to discharge the storage  # noqa: E501

        :return: The max_discharging_power of this Storage.
        :rtype: float
        """
        return self._max_discharging_power

    @max_discharging_power.setter
    def max_discharging_power(self, max_discharging_power: float):
        """Sets the max_discharging_power of this Storage.

        Maximal power to discharge the storage  # noqa: E501

        :param max_discharging_power: The max_discharging_power of this Storage.
        :type max_discharging_power: float
        """

        self._max_discharging_power = max_discharging_power

    @property
    def charge_efficiency(self) -> float:
        """Gets the charge_efficiency of this Storage.

        Efficiency for CHARGING the storage element. Default=90%. (%EffCharge)  # noqa: E501

        :return: The charge_efficiency of this Storage.
        :rtype: float
        """
        return self._charge_efficiency

    @charge_efficiency.setter
    def charge_efficiency(self, charge_efficiency: float):
        """Sets the charge_efficiency of this Storage.

        Efficiency for CHARGING the storage element. Default=90%. (%EffCharge)  # noqa: E501

        :param charge_efficiency: The charge_efficiency of this Storage.
        :type charge_efficiency: float
        """

        self._charge_efficiency = charge_efficiency

    @property
    def discharge_efficiency(self) -> float:
        """Gets the discharge_efficiency of this Storage.

        Efficiency for DISCHARGING the storage element. Default=90%. Idling losses are handled by %IdlingkW. (%EffCharge)  # noqa: E501

        :return: The discharge_efficiency of this Storage.
        :rtype: float
        """
        return self._discharge_efficiency

    @discharge_efficiency.setter
    def discharge_efficiency(self, discharge_efficiency: float):
        """Sets the discharge_efficiency of this Storage.

        Efficiency for DISCHARGING the storage element. Default=90%. Idling losses are handled by %IdlingkW. (%EffCharge)  # noqa: E501

        :param discharge_efficiency: The discharge_efficiency of this Storage.
        :type discharge_efficiency: float
        """

        self._discharge_efficiency = discharge_efficiency

    @property
    def powerfactor(self) -> float:
        """Gets the powerfactor of this Storage.

        (openDSS Name: pf)  # noqa: E501

        :return: The powerfactor of this Storage.
        :rtype: float
        """
        return self._powerfactor

    @powerfactor.setter
    def powerfactor(self, powerfactor: float):
        """Sets the powerfactor of this Storage.

        (openDSS Name: pf)  # noqa: E501

        :param powerfactor: The powerfactor of this Storage.
        :type powerfactor: float
        """

        self._powerfactor = powerfactor

    @property
    def optimization_model(self) -> str:
        """Gets the optimization_model of this Storage.

        (A value required by PROFFES)  # noqa: E501

        :return: The optimization_model of this Storage.
        :rtype: str
        """
        return self._optimization_model

    @optimization_model.setter
    def optimization_model(self, optimization_model: str):
        """Sets the optimization_model of this Storage.

        (A value required by PROFFES)  # noqa: E501

        :param optimization_model: The optimization_model of this Storage.
        :type optimization_model: str
        """
        if optimization_model is None:
            raise ValueError("Invalid value for `optimization_model`, must not be `None`")  # noqa: E501

        self._optimization_model = optimization_model

    @property
    def global_control(self) -> bool:
        """Gets the global_control of this Storage.


        :return: The global_control of this Storage.
        :rtype: bool
        """
        return self._global_control

    @global_control.setter
    def global_control(self, global_control: bool):
        """Sets the global_control of this Storage.


        :param global_control: The global_control of this Storage.
        :type global_control: bool
        """

        self._global_control = global_control

    @property
    def voltage_sensitivity_factor_active_power(self) -> float:
        """Gets the voltage_sensitivity_factor_active_power of this Storage.

        Unit: V/kW  # noqa: E501

        :return: The voltage_sensitivity_factor_active_power of this Storage.
        :rtype: float
        """
        return self._voltage_sensitivity_factor_active_power

    @voltage_sensitivity_factor_active_power.setter
    def voltage_sensitivity_factor_active_power(self, voltage_sensitivity_factor_active_power: float):
        """Sets the voltage_sensitivity_factor_active_power of this Storage.

        Unit: V/kW  # noqa: E501

        :param voltage_sensitivity_factor_active_power: The voltage_sensitivity_factor_active_power of this Storage.
        :type voltage_sensitivity_factor_active_power: float
        """

        self._voltage_sensitivity_factor_active_power = voltage_sensitivity_factor_active_power

    @property
    def voltage_sensitivity_factor_reactive_power(self) -> float:
        """Gets the voltage_sensitivity_factor_reactive_power of this Storage.

        Unit: V/kW  # noqa: E501

        :return: The voltage_sensitivity_factor_reactive_power of this Storage.
        :rtype: float
        """
        return self._voltage_sensitivity_factor_reactive_power

    @voltage_sensitivity_factor_reactive_power.setter
    def voltage_sensitivity_factor_reactive_power(self, voltage_sensitivity_factor_reactive_power: float):
        """Sets the voltage_sensitivity_factor_reactive_power of this Storage.

        Unit: V/kW  # noqa: E501

        :param voltage_sensitivity_factor_reactive_power: The voltage_sensitivity_factor_reactive_power of this Storage.
        :type voltage_sensitivity_factor_reactive_power: float
        """

        self._voltage_sensitivity_factor_reactive_power = voltage_sensitivity_factor_reactive_power
