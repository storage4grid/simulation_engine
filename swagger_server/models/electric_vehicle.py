# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ElectricVehicle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, so_c: float=None, battery_capacity_k_wh: float=None, consumption_in_k_w_pro_100_km: float=None, unit_consumption_assumption: float=5.0, unit_drop_penalty: float=None, unplugged_mean: float=None, unplugged_mean_std: float=None, plugged_mean: float=None, plugged_mean_std: float=None):  # noqa: E501
        """ElectricVehicle - a model defined in Swagger

        :param id: The id of this ElectricVehicle.  # noqa: E501
        :type id: str
        :param so_c: The so_c of this ElectricVehicle.  # noqa: E501
        :type so_c: float
        :param battery_capacity_k_wh: The battery_capacity_k_wh of this ElectricVehicle.  # noqa: E501
        :type battery_capacity_k_wh: float
        :param consumption_in_k_w_pro_100_km: The consumption_in_k_w_pro_100_km of this ElectricVehicle.  # noqa: E501
        :type consumption_in_k_w_pro_100_km: float
        :param unit_consumption_assumption: The unit_consumption_assumption of this ElectricVehicle.  # noqa: E501
        :type unit_consumption_assumption: float
        :param unit_drop_penalty: The unit_drop_penalty of this ElectricVehicle.  # noqa: E501
        :type unit_drop_penalty: float
        :param unplugged_mean: The unplugged_mean of this ElectricVehicle.  # noqa: E501
        :type unplugged_mean: float
        :param unplugged_mean_std: The unplugged_mean_std of this ElectricVehicle.  # noqa: E501
        :type unplugged_mean_std: float
        :param plugged_mean: The plugged_mean of this ElectricVehicle.  # noqa: E501
        :type plugged_mean: float
        :param plugged_mean_std: The plugged_mean_std of this ElectricVehicle.  # noqa: E501
        :type plugged_mean_std: float
        """
        self.swagger_types = {
            'id': str,
            'so_c': float,
            'battery_capacity_k_wh': float,
            'consumption_in_k_w_pro_100_km': float,
            'unit_consumption_assumption': float,
            'unit_drop_penalty': float,
            'unplugged_mean': float,
            'unplugged_mean_std': float,
            'plugged_mean': float,
            'plugged_mean_std': float
        }

        self.attribute_map = {
            'id': 'id',
            'so_c': 'SoC',
            'battery_capacity_k_wh': 'battery_capacity_kWh',
            'consumption_in_k_w_pro_100_km': 'consumption_in_kW_pro_100_km',
            'unit_consumption_assumption': 'unit_consumption_assumption',
            'unit_drop_penalty': 'unit_drop_penalty',
            'unplugged_mean': 'unplugged_mean',
            'unplugged_mean_std': 'unplugged_mean_std',
            'plugged_mean': 'plugged_mean',
            'plugged_mean_std': 'plugged_mean_std'
        }

        self._id = id
        self._so_c = so_c
        self._battery_capacity_k_wh = battery_capacity_k_wh
        self._consumption_in_k_w_pro_100_km = consumption_in_k_w_pro_100_km
        self._unit_consumption_assumption = unit_consumption_assumption
        self._unit_drop_penalty = unit_drop_penalty
        self._unplugged_mean = unplugged_mean
        self._unplugged_mean_std = unplugged_mean_std
        self._plugged_mean = plugged_mean
        self._plugged_mean_std = plugged_mean_std

    @classmethod
    def from_dict(cls, dikt) -> 'ElectricVehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ElectricVehicle of this ElectricVehicle.  # noqa: E501
        :rtype: ElectricVehicle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ElectricVehicle.


        :return: The id of this ElectricVehicle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ElectricVehicle.


        :param id: The id of this ElectricVehicle.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def so_c(self) -> float:
        """Gets the so_c of this ElectricVehicle.


        :return: The so_c of this ElectricVehicle.
        :rtype: float
        """
        return self._so_c

    @so_c.setter
    def so_c(self, so_c: float):
        """Sets the so_c of this ElectricVehicle.


        :param so_c: The so_c of this ElectricVehicle.
        :type so_c: float
        """
        if so_c is None:
            raise ValueError("Invalid value for `so_c`, must not be `None`")  # noqa: E501
        if so_c is not None and so_c > 100:  # noqa: E501
            raise ValueError("Invalid value for `so_c`, must be a value less than or equal to `100`")  # noqa: E501
        if so_c is not None and so_c < 0:  # noqa: E501
            raise ValueError("Invalid value for `so_c`, must be a value greater than or equal to `0`")  # noqa: E501

        self._so_c = so_c

    @property
    def battery_capacity_k_wh(self) -> float:
        """Gets the battery_capacity_k_wh of this ElectricVehicle.


        :return: The battery_capacity_k_wh of this ElectricVehicle.
        :rtype: float
        """
        return self._battery_capacity_k_wh

    @battery_capacity_k_wh.setter
    def battery_capacity_k_wh(self, battery_capacity_k_wh: float):
        """Sets the battery_capacity_k_wh of this ElectricVehicle.


        :param battery_capacity_k_wh: The battery_capacity_k_wh of this ElectricVehicle.
        :type battery_capacity_k_wh: float
        """
        if battery_capacity_k_wh is None:
            raise ValueError("Invalid value for `battery_capacity_k_wh`, must not be `None`")  # noqa: E501

        self._battery_capacity_k_wh = battery_capacity_k_wh

    @property
    def consumption_in_k_w_pro_100_km(self) -> float:
        """Gets the consumption_in_k_w_pro_100_km of this ElectricVehicle.


        :return: The consumption_in_k_w_pro_100_km of this ElectricVehicle.
        :rtype: float
        """
        return self._consumption_in_k_w_pro_100_km

    @consumption_in_k_w_pro_100_km.setter
    def consumption_in_k_w_pro_100_km(self, consumption_in_k_w_pro_100_km: float):
        """Sets the consumption_in_k_w_pro_100_km of this ElectricVehicle.


        :param consumption_in_k_w_pro_100_km: The consumption_in_k_w_pro_100_km of this ElectricVehicle.
        :type consumption_in_k_w_pro_100_km: float
        """
        if consumption_in_k_w_pro_100_km is None:
            raise ValueError("Invalid value for `consumption_in_k_w_pro_100_km`, must not be `None`")  # noqa: E501

        self._consumption_in_k_w_pro_100_km = consumption_in_k_w_pro_100_km

    @property
    def unit_consumption_assumption(self) -> float:
        """Gets the unit_consumption_assumption of this ElectricVehicle.


        :return: The unit_consumption_assumption of this ElectricVehicle.
        :rtype: float
        """
        return self._unit_consumption_assumption

    @unit_consumption_assumption.setter
    def unit_consumption_assumption(self, unit_consumption_assumption: float):
        """Sets the unit_consumption_assumption of this ElectricVehicle.


        :param unit_consumption_assumption: The unit_consumption_assumption of this ElectricVehicle.
        :type unit_consumption_assumption: float
        """

        self._unit_consumption_assumption = unit_consumption_assumption

    @property
    def unit_drop_penalty(self) -> float:
        """Gets the unit_drop_penalty of this ElectricVehicle.


        :return: The unit_drop_penalty of this ElectricVehicle.
        :rtype: float
        """
        return self._unit_drop_penalty

    @unit_drop_penalty.setter
    def unit_drop_penalty(self, unit_drop_penalty: float):
        """Sets the unit_drop_penalty of this ElectricVehicle.


        :param unit_drop_penalty: The unit_drop_penalty of this ElectricVehicle.
        :type unit_drop_penalty: float
        """

        self._unit_drop_penalty = unit_drop_penalty

    @property
    def unplugged_mean(self) -> float:
        """Gets the unplugged_mean of this ElectricVehicle.


        :return: The unplugged_mean of this ElectricVehicle.
        :rtype: float
        """
        return self._unplugged_mean

    @unplugged_mean.setter
    def unplugged_mean(self, unplugged_mean: float):
        """Sets the unplugged_mean of this ElectricVehicle.


        :param unplugged_mean: The unplugged_mean of this ElectricVehicle.
        :type unplugged_mean: float
        """

        self._unplugged_mean = unplugged_mean

    @property
    def unplugged_mean_std(self) -> float:
        """Gets the unplugged_mean_std of this ElectricVehicle.


        :return: The unplugged_mean_std of this ElectricVehicle.
        :rtype: float
        """
        return self._unplugged_mean_std

    @unplugged_mean_std.setter
    def unplugged_mean_std(self, unplugged_mean_std: float):
        """Sets the unplugged_mean_std of this ElectricVehicle.


        :param unplugged_mean_std: The unplugged_mean_std of this ElectricVehicle.
        :type unplugged_mean_std: float
        """

        self._unplugged_mean_std = unplugged_mean_std

    @property
    def plugged_mean(self) -> float:
        """Gets the plugged_mean of this ElectricVehicle.


        :return: The plugged_mean of this ElectricVehicle.
        :rtype: float
        """
        return self._plugged_mean

    @plugged_mean.setter
    def plugged_mean(self, plugged_mean: float):
        """Sets the plugged_mean of this ElectricVehicle.


        :param plugged_mean: The plugged_mean of this ElectricVehicle.
        :type plugged_mean: float
        """

        self._plugged_mean = plugged_mean

    @property
    def plugged_mean_std(self) -> float:
        """Gets the plugged_mean_std of this ElectricVehicle.


        :return: The plugged_mean_std of this ElectricVehicle.
        :rtype: float
        """
        return self._plugged_mean_std

    @plugged_mean_std.setter
    def plugged_mean_std(self, plugged_mean_std: float):
        """Sets the plugged_mean_std of this ElectricVehicle.


        :param plugged_mean_std: The plugged_mean_std of this ElectricVehicle.
        :type plugged_mean_std: float
        """

        self._plugged_mean_std = plugged_mean_std
