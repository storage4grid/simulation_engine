# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Capacitor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, bus: str=None, phases: int=None, k_var: float=None, k_v: float=None):  # noqa: E501
        """Capacitor - a model defined in Swagger

        :param id: The id of this Capacitor.  # noqa: E501
        :type id: str
        :param bus: The bus of this Capacitor.  # noqa: E501
        :type bus: str
        :param phases: The phases of this Capacitor.  # noqa: E501
        :type phases: int
        :param k_var: The k_var of this Capacitor.  # noqa: E501
        :type k_var: float
        :param k_v: The k_v of this Capacitor.  # noqa: E501
        :type k_v: float
        """
        self.swagger_types = {
            'id': str,
            'bus': str,
            'phases': int,
            'k_var': float,
            'k_v': float
        }

        self.attribute_map = {
            'id': 'id',
            'bus': 'bus',
            'phases': 'phases',
            'k_var': 'kVar',
            'k_v': 'kV'
        }

        self._id = id
        self._bus = bus
        self._phases = phases
        self._k_var = k_var
        self._k_v = k_v

    @classmethod
    def from_dict(cls, dikt) -> 'Capacitor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Capacitor of this Capacitor.  # noqa: E501
        :rtype: Capacitor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Capacitor.


        :return: The id of this Capacitor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Capacitor.


        :param id: The id of this Capacitor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def bus(self) -> str:
        """Gets the bus of this Capacitor.

        ID for the connected node  # noqa: E501

        :return: The bus of this Capacitor.
        :rtype: str
        """
        return self._bus

    @bus.setter
    def bus(self, bus: str):
        """Sets the bus of this Capacitor.

        ID for the connected node  # noqa: E501

        :param bus: The bus of this Capacitor.
        :type bus: str
        """
        if bus is None:
            raise ValueError("Invalid value for `bus`, must not be `None`")  # noqa: E501

        self._bus = bus

    @property
    def phases(self) -> int:
        """Gets the phases of this Capacitor.


        :return: The phases of this Capacitor.
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases: int):
        """Sets the phases of this Capacitor.


        :param phases: The phases of this Capacitor.
        :type phases: int
        """
        if phases is None:
            raise ValueError("Invalid value for `phases`, must not be `None`")  # noqa: E501

        self._phases = phases

    @property
    def k_var(self) -> float:
        """Gets the k_var of this Capacitor.


        :return: The k_var of this Capacitor.
        :rtype: float
        """
        return self._k_var

    @k_var.setter
    def k_var(self, k_var: float):
        """Sets the k_var of this Capacitor.


        :param k_var: The k_var of this Capacitor.
        :type k_var: float
        """

        self._k_var = k_var

    @property
    def k_v(self) -> float:
        """Gets the k_v of this Capacitor.


        :return: The k_v of this Capacitor.
        :rtype: float
        """
        return self._k_v

    @k_v.setter
    def k_v(self, k_v: float):
        """Sets the k_v of this Capacitor.


        :param k_v: The k_v of this Capacitor.
        :type k_v: float
        """
        if k_v is None:
            raise ValueError("Invalid value for `k_v`, must not be `None`")  # noqa: E501

        self._k_v = k_v
